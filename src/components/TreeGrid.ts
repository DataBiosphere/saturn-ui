import _ from 'lodash/fp';
import { ReactElement, useState } from 'react';
import { div, h, strong } from 'react-hyperscript-helpers';
import { Grid } from 'react-virtualized';
import { Link } from 'src/components/common/Link';
import { icon } from 'src/components/icons';
import colors from 'src/libs/colors';
import { DEFAULT, switchCase, toIndexPairs } from 'src/libs/utils';

export type RowContents = {
  // The id could be generated by `wrapContent` if we can't rely on the data having an id field.
  /** The row's unique identifier. */
  id: number;
  /** If true, this row has children. */
  hasChildren: boolean;
};

export type Column<T extends RowContents> = {
  /** The column's name, displayed as a column header. */
  name: string;
  /** The column's width, in pixels. */
  width: number;
  /** Given the current row, return the column's contents. */
  render: (row: T) => string | ReactElement;
};

type RowState = 'closed' | 'opening' | 'open';

type Row<T extends RowContents> = {
  contents: T;
  depth: number;
  isFetched: boolean;
  state: RowState;
};

/**
 *  Wrap a RowContents in a Row object.
 *  @param depth the tree depth of the wrapped row
 */
const wrapContent =
  (depth: number) =>
  <T extends RowContents>(contents: T): Row<T> => ({
    contents,
    depth,
    isFetched: false,
    state: 'closed',
  });

type TreeGridProps<T extends RowContents> = {
  /** the columns to display */
  readonly columns: Column<T>[];
  /** the initial rows to display */
  readonly initialRows: T[];
  /** Given a row, return its children. This is only called if row.hasChildren is true. */
  readonly getChildren: (row: T) => Promise<T[]>;
};

type TreeGridPropsInner<T extends RowContents> = TreeGridProps<T> & {
  readonly gridWidth: number;
};

/**
 * Given all rows, return the rows that are currently visible.
 */
function getVisibleRows<T extends RowContents>(allRows: Row<T>[]) {
  const visibleRows: Row<T>[] = [];
  // Root elements are always visible.
  let visibleDepth = 0;
  for (const row of allRows) {
    // A row is not visible if it's deeper than the current deepest visible row.
    if (row.depth > visibleDepth) {
      continue;
    }
    if (row.state === 'open') {
      // If a row is open, then all rows deeper than it are also visible.
      visibleDepth = row.depth + 1;
    } else {
      // If a row is closed, the visible depth is now the current row's depth.
      visibleDepth = row.depth;
    }
    visibleRows.push(row);
  }
  return visibleRows;
}

const TreeGridInner = <T extends RowContents>(props: TreeGridPropsInner<T>) => {
  const { columns, initialRows, getChildren, gridWidth } = props;
  const [data, setData] = useState(_.map(wrapContent(0), initialRows));
  const rowHeight = 40;
  const expand = async (row: Row<T>) => {
    const index = _.findIndex((r) => r.contents.id === row.contents.id, data);
    if (row.isFetched) {
      // Children already fetched, mark as open and return.
      setData(_.set(`[${index}].state`, 'open', data));
      return;
    }
    // Mark as opening.
    setData(_.set(`[${index}].state`, 'opening', data));

    // Fetch children.
    const children = await getChildren(row.contents);

    // Mark as fetched and insert children.
    setData((currentData) => {
      const currentIndex = _.findIndex((r) => r.contents.id === row.contents.id, currentData);
      const currentRow = currentData[currentIndex];
      const newData = _.set(`[${currentIndex}]`, { ...currentRow, state: 'open', isFetched: true }, currentData);
      newData.splice(currentIndex + 1, 0, ..._.map(wrapContent(currentRow.depth + 1), children));
      return newData;
    });
  };
  const collapse = (row: Row<T>) => {
    // A row that's opening doesn't respond to clicks, so there's no need to handle it here.
    const index = _.findIndex((r) => r.contents.id === row.contents.id, data);
    setData(_.flow(_.cloneDeep, _.set(`[${index}].state`, 'closed'))(data));
  };

  const visibleRows = getVisibleRows(data);

  return h(Grid, {
    rowHeight,
    height: rowHeight * visibleRows.length,
    rowCount: visibleRows.length,
    columnCount: columns.length,
    columnWidth: (index) => columns[index.index].width,
    width: gridWidth,
    noContentMessage: 'No matching data',
    cellRenderer: ({ rowIndex, columnIndex, style }) => {
      const row = visibleRows[rowIndex];
      const [handler, iconName, label] = (() => {
        switch (row.state) {
          case 'closed':
            return [expand, 'angle-up', 'expand'];
          case 'opening':
            return [undefined, 'loadingSpinner', ''];
          case 'open':
          default:
            return [collapse, 'angle-down', 'collapse'];
        }
      })();
      return div(
        {
          key: `${rowIndex}-${columnIndex}`,
          style: {
            ...style,
            backgroundColor: 'white',
            borderTop: rowIndex === 0 ? 0 : `.5px solid ${colors.dark(0.2)}`,
            paddingTop: 10,
            alignItems: 'center',
          },
        },
        [
          switchCase(
            columnIndex,
            [
              0,
              () =>
                div({ style: { paddingLeft: `${1 + row.depth}rem`, display: 'flex' } }, [
                  row.contents.hasChildren &&
                    (handler
                      ? h(Link, { onClick: () => handler(row), 'aria-label': label, style: { paddingLeft: 5 } }, [
                          icon(iconName, { size: 16 }),
                        ])
                      : icon(iconName, { size: 16, style: { marginLeft: 5 } })),
                  div({ style: { display: 'flex', marginLeft: row.contents.hasChildren ? 10 : 5 + 16 + 10 } }, [
                    columns[columnIndex].render(row.contents),
                  ]),
                ]),
            ],
            [DEFAULT, () => columns[columnIndex].render(row.contents)]
          ),
        ]
      );
    },
    border: false,
  });
};

/**
 * A grid that displays hierarchical data in a tree-like structure.
 * <p/>
 * Width is computed as the total size of all columns. Height is
 * computed as the number of rows times the row height.
 */
export const TreeGrid = <T extends RowContents>(props: TreeGridProps<T>) => {
  const { columns } = props;
  const gridWidth = _.sum(_.map((c) => c.width, columns));
  return div([
    // generate a header row
    div(
      {
        style: {
          height: '100%',
          width: _.sum(_.map((c) => c.width, columns)),
          display: 'flex',
          paddingTop: 15,
          paddingBottom: 15,
          backgroundColor: colors.light(0.4),
          borderRadius: '8px 8px 0px 0px',
          border: `.5px solid ${colors.dark(0.2)}`,
        },
      },
      [
        _.map(
          ([index, c]) =>
            div(
              {
                key: index,
                style: { width: c.width, marginTop: 5, paddingRight: 5, paddingLeft: index === 0 ? 20 : 0 },
              },
              [strong([c.name])]
            ),
          toIndexPairs(columns)
        ),
      ]
    ),
    h(TreeGridInner<T>, { ...props, gridWidth }),
  ]);
};
