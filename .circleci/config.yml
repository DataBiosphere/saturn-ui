version: 2.1

parameters:
  run-notify-job:
    type: boolean
    default: false
  notify-workflow-id:
    type: string
    default: ""
  notify-job-name:
    type: enum
    enum: [ integration-tests-alpha, integration-tests-staging, integration-tests-branch-against-dev ]
    default: integration-tests-alpha


orbs:
  slack: circleci/slack@3.4.2

executors:
  node:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:16.14
  puppeteer:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:16.14-browsers
  gcloud:
    working_directory: /mnt/ramdisk
    docker:
      - image: google/cloud-sdk:alpine

anchors:
  filter-pr-branch: &filter-pr-branch
    filters:
      branches:
        ignore: dev

  filter-dev-branch: &filter-dev-branch
    filters:
      branches:
        only: dev

commands:
  notify-github: # borrows from https://circleci.com/developer/orbs/orb/mmnfst/github-deployments#orb-source
    parameters:
      env:
        type: string
      pr:
        type: boolean
      existing:
        type: boolean
        default: false
    steps:
      - unless:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Notify Github of deployment
                unless: << parameters.existing >>
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  apk add github-cli jq --no-progress --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/community/
                  <<# parameters.pr >>
                  VERSION="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)"
                  <</ parameters.pr >><<^ parameters.pr >>
                  VERSION="<< parameters.env >>"
                  <</ parameters.pr >>
                  # until https://github.com/cli/cli/issues/1484 is resolved, pass json input:
                  echo "{\"ref\": \"$CIRCLE_BRANCH\", \"environment\": \"$VERSION\", \"auto_merge\": false, \"required_contexts\": []}" > /tmp/request.json
                  # echo the complete response while saving it
                  RESPONSE=$(gh api repos/databiosphere/terra-ui/deployments -H "Authorization: token $GITHUB_TOKEN" --input /tmp/request.json | tee >(jq . > /dev/tty))
                  # parse the part we want for later
                  echo $RESPONSE | jq .id | tee /tmp/build_num
      - when:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Update Github deployment status
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  <<# parameters.pr >>
                  PR_SLUG="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)-dot-"
                  <</ parameters.pr >>
                  RESPONSE=$(gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" \
                    -F state=success -F environment_url="https://${PR_SLUG}bvdp-saturn-<< parameters.env >>.appspot.com" -F log_url="$CIRCLE_BUILD_URL")
                  echo $RESPONSE
            - run:
                name: Update Github deployment status
                when: on_fail
                command: |
                  gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" -F state=failure

  deploy-env:
    description: "Deploy to a specific environment"
    parameters:
      sa_key_var:
        type: env_var_name
        default: "SA_KEY_JSON"
      env:
        type: enum
        enum: [dev, staging, alpha, perf]
        default: dev
      pr:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Check for PR number
                command: |
                  if [[ -z "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" ]]; then
                    echo "No PR number, not deploying"
                    circleci-agent step halt
                  fi
      - attach_workspace:
          at: .
      - run: cp config/<< parameters.env >>.json build/config.json
      - run: echo "$<< parameters.sa_key_var >>" > /tmp/sa.json
      - run: gcloud auth activate-service-account --key-file=/tmp/sa.json
      - notify-github:
          env: << parameters.env >>
          pr: << parameters.pr >>
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy PR
                command: |
                  CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"
                  if [[ ! -z "$CIRCLE_PR_NUMBER" ]]; then
                    gcloud app deploy \
                      --project=bvdp-saturn-<< parameters.env >> \
                      --version="pr-$(expr "$CIRCLE_PR_NUMBER" % $NUM_PR_SITES)" \
                      --no-promote --quiet
                  fi
      - unless:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy << parameters.env >>
                command: gcloud app deploy --project=bvdp-saturn-<< parameters.env >> --promote --quiet
      - notify-github:
          existing: true
          env: << parameters.env >>
          pr: << parameters.pr >>
  integration-tests:
    parameters:
      local:
        type: boolean
        default: false
      env:
        type: enum
        enum: [ local, staging, alpha ]
        default: local
      log_dir:
        type: string
        default: "/tmp"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run:
          working_directory: integration-tests
          command: yarn install --immutable-cache
      - when:
          condition: << parameters.local >>
          steps:
            - run: cp config/dev.json build/config.json
            - run:
                command: npx serve build -l 3000
                background: true
            - run: timeout 120 bash -c "until nc -z localhost 3000; do sleep 3; done"
      - run:
          working_directory: integration-tests
          name: Running UI integration tests
          environment:
            LOG_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results"
            JEST_JUNIT_OUTPUT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/junit"
            SCREENSHOT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/failure-screenshots"
            ENVIRONMENT: << parameters.env >>
          no_output_timeout: 16m
          command: |
            mkdir -p ${SCREENSHOT_DIR}
            TESTS_TO_RUN=$(yarn run jest --listTests | sed "s|$(pwd)/||" | circleci tests split --split-by=timings)
            yarn test janitor.js
      - store_test_results:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results/junit
      - store_artifacts:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results
          destination: results
      - run:
          # Trigger notify-test-results job. Works on Dev branch only.
          # TODO $CIRCLE_BRANCH == "dev"
          name: Trigger notify-test-results job only on CIRCLE_NODE_INDEX = 0
          command: |
            if [[ $CIRCLE_NODE_INDEX -eq 0 ]]; then
              curl -u ${CIRCLECI_TOKEN}: -X POST  \
                --header 'content-type: application/json' \
                --url 'https://circleci.com/api/v2/project/github/DataBiosphere/terra-ui/pipeline' \
                --data '{"branch":"'$CIRCLE_BRANCH'","parameters":{"run-notify-job":true,"notify-workflow-id":"'$CIRCLE_WORKFLOW_ID'","notify-job-name":"'$CIRCLE_JOB'"}}'
            fi
          when: always

  notify-qa:
    parameters:
      channel:
        type: string
        default: ""
    steps:
      - slack/status:
          channel: << parameters.channel >>
          include_job_number_field: false
          include_project_field: false
          failure_message: ":sadpanda: $CIRCLE_JOB failed."
          success_message: ":circleci-pass: $CIRCLE_JOB ran successfully."

jobs:
  build:
    executor: node
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run: yarn install --immutable-cache
      - run: yarn eslint --max-warnings=0 .
      - run: yarn test --maxWorkers=2
      - run: DISABLE_ESLINT_PLUGIN=true yarn build # already linted above
      - save_cache:
          key: deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
          paths:
            - .yarn/unplugged
            - node_modules/.cache
      - run: tar -czf build.tgz .gcloudignore app.yaml build config
      - store_artifacts:
          path: build.tgz
      - persist_to_workspace:
          root: .
          paths:
            - .gcloudignore
            - app.yaml
            - build
            - config
  deploy-pr:
    executor: gcloud
    steps:
      - deploy-env:
          pr: true
  deploy-dev:
    executor: gcloud
    steps:
      - deploy-env
  deploy-alpha:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "ALPHA_SA_KEY_JSON"
          env: "alpha"
      - notify-qa:
          channel: "C7H40L71D" # dsde-qa-notify
  deploy-perf:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "PERF_SA_KEY_JSON"
          env: "perf"
  deploy-staging:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "STAGING_SA_KEY_JSON"
          env: "staging"
      - notify-qa:
          channel: "C7H40L71D" # dsde-qa-notify
  integration-tests-branch-against-dev:
    executor: puppeteer
    parallelism: 1
    parameters:
      approval_job:
        type: string
        default: notify-test-results-pr
    steps:
      - integration-tests:
          local: true
          env: local
  integration-tests-alpha:
    executor: puppeteer
    parallelism: 4
    steps:
      - integration-tests:
          env: alpha
  integration-tests-staging:
    executor: puppeteer
    parallelism: 4
    steps:
      - integration-tests:
          env: staging
  notify-test-results-unused:
    executor: node
    parameters:
      job_name:
        type: enum
        enum: [ integration-tests-alpha, integration-tests-staging, integration-tests-branch-against-dev ]
        default: integration-tests-alpha
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run:
          name: Wait up to 15 minutes for << parameters.job_name >> to finish
          command: |
            x=0
            while [[ $x -le 900 ]]
              do
                status=$(curl --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CIRCLECI_TOKEN" | jq -r '.items[]|select(.name == "<< parameters.job_name >>")|.status')
                echo "Job status: ${status}"
                if [[ $status == "success" ]] || [[ $status == "failed" ]]; then
                  break
                elif [[ $status == "canceled" ]]; then
                  circleci-agent step halt
                fi

                sleep 10
                x=$(( $x + 10 ))
              done

            echo "Waited $x seconds"
            date

            # Is job stuck?
            if [[ x -ge 900 ]]; then
              status=$(curl --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CIRCLECI_TOKEN" | jq -r '.items[]|select(.name == "<< parameters.job_name >>")|.status')
              echo "Final job status: ${status}"
              exit 1
            fi
      - run:
          name: Set JOB_BUILD_NUM from << parameters.job_name >>
          command: |
            build_num=$(curl --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CIRCLECI_TOKEN" | jq -r '.items[]|select(.name == "<< pipeline.parameters.job_name >>")|.job_number')
            echo "export JOB_BUILD_NUM=$build_num" >> "$BASH_ENV"
            echo "export JOB_NAME=<< parameters.job_name >>" >> "$BASH_ENV"
            source $BASH_ENV
      - run:
          name: Slack test results
          working_directory: integration-tests
          command: |
            node --require ../.pnp.cjs ./slack/slack-circleci-results.js


  notify-test-results:
    executor: node
    steps:
      - checkout
      - run:
          command: |
            echo "trigger-notify: << pipeline.parameters.run-notify-job >>"
            echo "notify-job-name: << pipeline.parameters.notify-job-name >>"
            echo "notify-workflow-id: << pipeline.parameters.notify-workflow-id >>"

      - run:
          name: Wait up to 15 minutes for << pipeline.parameters.notify-job-name >> to finish
          command: |
            x=0
            while [[ $x -le 900 ]]
              do
                status=$(curl --request GET "https://circleci.com/api/v2/workflow/<< pipeline.parameters.notify-workflow-id >>/job" \
                          --header "Circle-Token: $CIRCLECI_TOKEN" | jq -r '.items[] | select(.name == "<< pipeline.parameters.notify-job-name >>") | .status')
                echo "Job status: ${status}"
                if [[ $status == "success" ]] || [[ $status == "failed" ]]; then
                  break
                elif [[ $status == "canceled" ]]; then
                  circleci-agent step halt
                fi

                sleep 10
                x=$(( $x + 10 ))
              done

            echo "Waited $x seconds"
            date
      - run:
          name: Set JOB_BUILD_NUM from << pipeline.parameters.notify-job-name >>
          command: |
            job_num=$(curl --request GET "https://circleci.com/api/v2/workflow/<< pipeline.parameters.notify-workflow-id >>/job" \
                        --header "Circle-Token: $CIRCLECI_TOKEN" | jq -r '.items[] | select(.name == "<< pipeline.parameters.notify-job-name >>") | .job_number')
            echo "export JOB_BUILD_NUM=$job_num" >> "$BASH_ENV"
            echo "export JOB_NAME=<< pipeline.parameters.notify-job-name >>" >> "$BASH_ENV"
            source $BASH_ENV
      - run:
          name: Slack test results
          working_directory: integration-tests
          command: |
            node --require ../.pnp.cjs ./slack/slack-circleci-results.js


workflows:
  version: 2

  notify-slack:
    when: << pipeline.parameters.run-notify-job >>
    jobs:
      - notify-test-results
          #<<: *filter-dev-branch

  build-deploy:
    unless: << pipeline.parameters.run-notify-job >>
    jobs:
      - build
      - integration-tests-branch-against-dev:
          <<: *filter-pr-branch
          requires:
            - build

      - deploy-pr:
          <<: *filter-pr-branch
          requires:
            - build
      - deploy-dev:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-alpha:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-perf:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-staging:
          <<: *filter-dev-branch
          requires:
            - build
      - integration-tests-alpha:
          <<: *filter-dev-branch
          requires:
            - deploy-alpha
      - integration-tests-staging:
          <<: *filter-dev-branch
          requires:
            - deploy-staging


  nightly-integration-tests:
    triggers:
      - schedule:
          cron: "0 13 * * *"
          filters:
            branches:
              only: dev
    jobs:
      - integration-tests-alpha
      - integration-tests-staging
