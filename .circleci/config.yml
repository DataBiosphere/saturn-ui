version: 2.1

parameters:
  workflow_to_run:
    type: enum
    enum:
      - build-deploy
      - integration-tests-staging
    default: build-deploy

orbs:
  slack: circleci/slack@3.4.2
  sonarcloud: sonarsource/sonarcloud@2.0.0

executors:
  node:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:20.11
  puppeteer:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:20.11-browsers
  gcloud:
    working_directory: /mnt/ramdisk
    docker:
      - image: google/cloud-sdk:alpine

anchors:
  filter-pr-branch: &filter-pr-branch
    filters:
      branches:
        ignore:
          - dev
          - /gh-readonly-queue\/.*/

  filter-dev-branch: &filter-dev-branch
    filters:
      branches:
        only: dev

commands:
  notify-github: # borrows from https://circleci.com/developer/orbs/orb/mmnfst/github-deployments#orb-source
    parameters:
      env:
        type: string
      pr:
        type: boolean
      existing:
        type: boolean
        default: false
    steps:
      - unless:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Notify Github of deployment
                unless: << parameters.existing >>
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  apk add github-cli jq --no-progress --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/community/
                  <<# parameters.pr >>
                  VERSION="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)"
                  <</ parameters.pr >><<^ parameters.pr >>
                  VERSION="<< parameters.env >>"
                  <</ parameters.pr >>
                  # until https://github.com/cli/cli/issues/1484 is resolved, pass json input:
                  echo "{\"ref\": \"$CIRCLE_BRANCH\", \"environment\": \"$VERSION\", \"auto_merge\": false, \"required_contexts\": []}" > /tmp/request.json
                  # echo the complete response while saving it
                  RESPONSE=$(gh api repos/databiosphere/terra-ui/deployments -H "Authorization: token $GITHUB_TOKEN" --input /tmp/request.json | tee >(jq . > /dev/tty))
                  # parse the part we want for later
                  echo $RESPONSE | jq .id | tee /tmp/build_num
      - when:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Update Github deployment status
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  <<# parameters.pr >>
                  PR_SLUG="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)-dot-"
                  <</ parameters.pr >>
                  RESPONSE=$(gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" \
                    -F state=success -F environment_url="https://${PR_SLUG}bvdp-saturn-<< parameters.env >>.appspot.com" -F log_url="$CIRCLE_BUILD_URL")
                  echo $RESPONSE
            - run:
                name: Update Github deployment status
                when: on_fail
                command: |
                  gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" -F state=failure

  deploy-env:
    description: "Deploy to a specific environment"
    parameters:
      sa_key_var:
        type: env_var_name
        default: "SA_KEY_JSON"
      env:
        type: enum
        enum: [dev, staging]
        default: dev
      pr:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Check for PR number
                command: |
                  if [[ -z "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" ]]; then
                    echo "No PR number, not deploying"
                    circleci-agent step halt
                  fi
      - attach_workspace:
          at: .
      - run: cp config/<< parameters.env >>.json build/config.json
      - run: echo "$<< parameters.sa_key_var >>" > /tmp/sa.json
      - run: gcloud auth activate-service-account --key-file=/tmp/sa.json
      - notify-github:
          env: << parameters.env >>
          pr: << parameters.pr >>
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy PR
                command: |
                  CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"
                  if [[ ! -z "$CIRCLE_PR_NUMBER" ]]; then
                    gcloud app deploy \
                      --project=bvdp-saturn-<< parameters.env >> \
                      --version="pr-$(expr "$CIRCLE_PR_NUMBER" % $NUM_PR_SITES)" \
                      --no-promote --quiet
                  fi
      - unless:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy << parameters.env >>
                command: gcloud app deploy --project=bvdp-saturn-<< parameters.env >> --promote --quiet
      - notify-github:
          existing: true
          env: << parameters.env >>
          pr: << parameters.pr >>
  integration-tests:
    parameters:
      local:
        type: boolean
        default: false
      env:
        type: enum
        enum: [ staging ]
        default: staging
      log_dir:
        type: string
        default: "/tmp"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run:
          working_directory: integration-tests
          command: yarn install --immutable
      - when:
          condition: << parameters.local >>
          steps:
            - run: cp config/<< parameters.env >>.json build/config.json
            - run:
                command: npx serve build -l 3000
                background: true
            - run: timeout 120 bash -c "until nc -z localhost 3000; do sleep 3; done"
      - run:
          working_directory: integration-tests
          name: Running UI integration tests
          environment:
            LOG_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results"
            JEST_JUNIT_OUTPUT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/junit"
            SCREENSHOT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/failure-screenshots"
            ENVIRONMENT: << parameters.env >>
          no_output_timeout: 30m
          command: |
            mkdir -p ${SCREENSHOT_DIR}
            TESTS_TO_RUN=$(yarn run jest --listTests | sed "s|$(pwd)/||")
            <<# parameters.local >>
            export TEST_URL=http://localhost:3000
            <</ parameters.local >>
            echo "$TESTS_TO_RUN" | circleci tests run --command="xargs yarn test --maxWorkers=2" --verbose --split-by=timings
      - store_test_results:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results/junit
      - store_artifacts:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results
          destination: results
      - run:
          working_directory: integration-tests
          name: Slack notification on dev branch only
          command: |
            if [ "$CIRCLE_BRANCH" = "alex-ci-testing" ]; then
              bash ../.circleci/wait-for-job-finish.sh
              node --require ../.pnp.cjs ./slack/notify-circleci-test-results.js
            fi
          when: always

jobs:
  build:
    executor: node
    resource_class: large
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run: yarn install --immutable
      - run:
          name: "Check for missing cache files"
          command: |
            if [[ $(git ls-files .yarn/cache --exclude-standard --others) ]]; then
              echo "Changes to Yarn cache need to be committed" 1>&2
              echo "To resolve this, checkout this branch, run yarn, and commit any untracked files in .yarn/cache" 1>&2
              git ls-files .yarn/cache --exclude-standard --others 1>&2
              exit 1
            fi
      - run: yarn run build
      - run: yarn eslint --max-warnings=0 .
      - run: yarn workspaces foreach --exclude terra-integration-tests run test --coverage --maxWorkers=2 --passWithNoTests
      - store_artifacts:
          path: test-report/index.html
      - run: yarn check-types
      - save_cache:
          key: deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
          paths:
            - .yarn/unplugged
            - node_modules/.cache
      - run: tar -czf build.tgz .gcloudignore app.yaml build config
      - store_artifacts:
          path: build.tgz
      - persist_to_workspace:
          root: .
          paths:
            - .gcloudignore
            - app.yaml
            - build
            - config
      - sonarcloud/scan
  deploy-pr:
    executor: gcloud
    steps:
      - deploy-env:
          pr: true
  deploy-dev:
    executor: gcloud
    steps:
      - deploy-env
  deploy-staging:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "STAGING_SA_KEY_JSON"
          env: "staging"
      - slack/status:
          channel: "C6DTFUCDD" # workbench-release
          include_job_number_field: false
          include_project_field: false
          failure_message: ":circleci-fail: Terra UI deployment to staging failed"
          success_message: ":circleci-pass: Terra UI deployment to staging done"
  integration-tests-pr-staging:
    executor: puppeteer
    resource_class: medium+
    parallelism: 4
    steps:
      - integration-tests:
          local: true
          env: staging
  integration-tests-staging:
    executor: puppeteer
    resource_class: medium+
    parallelism: 4
    steps:
      - integration-tests:
          env: staging

workflows:
  version: 2
  build-deploy:
    when:
      equal: [build-deploy, << pipeline.parameters.workflow_to_run >>]
    jobs:
      - build
      - integration-tests-pr-staging:
          <<: *filter-pr-branch
          requires:
            - build
      - deploy-pr:
          <<: *filter-pr-branch
          requires:
            - build
      - deploy-dev:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-staging:
          <<: *filter-dev-branch
          requires:
            - build
      - integration-tests-staging:
          <<: *filter-dev-branch
          requires:
            - deploy-staging
  integration-tests-staging:
    when:
      equal: [integration-tests-staging, << pipeline.parameters.workflow_to_run >>]
    jobs:
      - integration-tests-staging
  nightly-integration-tests:
    triggers:
      - schedule:
          <<: *filter-dev-branch
          cron: "0 13 * * *"
    jobs:
      - integration-tests-staging
