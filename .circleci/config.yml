version: 2.1

orbs:
  slack: circleci/slack@4.10.1

anchors:
  # Run jobs for PR branches only. No tags and Dev branch.
  filter-pr-branch: &filter-pr-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        ignore: dev

  # Run jobs for Dev branch only. No PR branch and tags branch.
  filter-dev-branch: &filter-dev-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: dev

executors:
  node:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:16.14
  puppeteer:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:16.14-browsers
  gcloud:
    working_directory: /mnt/ramdisk
    docker:
      - image: google/cloud-sdk:alpine

commands:
  notify-github: # borrows from https://circleci.com/developer/orbs/orb/mmnfst/github-deployments#orb-source
    parameters:
      env:
        type: string
      pr:
        type: boolean
      existing:
        type: boolean
        default: false
    steps:
      - unless:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Notify Github of deployment
                unless: << parameters.existing >>
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  apk add github-cli jq --no-progress --repository=https://dl-cdn.alpinelinux.org/alpine/latest-stable/community/
                  <<# parameters.pr >>
                  VERSION="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)"
                  <</ parameters.pr >><<^ parameters.pr >>
                  VERSION="<< parameters.env >>"
                  <</ parameters.pr >>
                  # until https://github.com/cli/cli/issues/1484 is resolved, pass json input:
                  echo "{\"ref\": \"$CIRCLE_BRANCH\", \"environment\": \"$VERSION\", \"auto_merge\": false, \"required_contexts\": []}" > /tmp/request.json
                  # echo the complete response while saving it
                  RESPONSE=$(gh api repos/databiosphere/terra-ui/deployments -H "Authorization: token $GITHUB_TOKEN" --input /tmp/request.json | tee >(jq . > /dev/tty))
                  # parse the part we want for later
                  echo $RESPONSE | jq .id | tee /tmp/build_num
      - when:
          condition: << parameters.existing >>
          steps:
            - run:
                name: Update Github deployment status
                command: |
                  set +e -x # don't allow a failure here to fail the job, print steps when running them
                  <<# parameters.pr >>
                  PR_SLUG="pr-$(expr "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" % $NUM_PR_SITES)-dot-"
                  <</ parameters.pr >>
                  RESPONSE=$(gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" \
                    -F state=success -F environment_url="https://${PR_SLUG}bvdp-saturn-<< parameters.env >>.appspot.com" -F log_url="$CIRCLE_BUILD_URL")
                  echo $RESPONSE
            - run:
                name: Update Github deployment status
                when: on_fail
                command: |
                  gh api "repos/databiosphere/terra-ui/deployments/$(cat /tmp/build_num)/statuses" -H "Authorization: token $GITHUB_TOKEN" -F state=failure

  deploy-env:
    description: "Deploy to a specific environment"
    parameters:
      sa_key_var:
        type: env_var_name
        default: "SA_KEY_JSON"
      env:
        type: enum
        enum: ["dev", "staging", "alpha", "perf"]
        default: "dev"
      pr:
        type: boolean
        default: false
    steps:
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Check for PR number
                command: |
                  if [[ -z "${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}" ]]; then
                    echo "No PR number, not deploying"
                    circleci-agent step halt
                  fi
      - attach_workspace:
          at: .
      - run: cp config/<< parameters.env >>.json build/config.json
      - run: echo "$<< parameters.sa_key_var >>" > /tmp/sa.json
      - run: gcloud auth activate-service-account --key-file=/tmp/sa.json
      - notify-github:
          env: << parameters.env >>
          pr: << parameters.pr >>
      - when:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy PR
                command: |
                  CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"
                  if [[ ! -z "$CIRCLE_PR_NUMBER" ]]; then
                    gcloud app deploy \
                      --project=bvdp-saturn-<< parameters.env >> \
                      --version="pr-$(expr "$CIRCLE_PR_NUMBER" % $NUM_PR_SITES)" \
                      --no-promote --quiet
                  fi
      - unless:
          condition: << parameters.pr >>
          steps:
            - run:
                name: Deploy << parameters.env >>
                command: gcloud app deploy --project=bvdp-saturn-<< parameters.env >> --promote --quiet
      - notify-github:
          existing: true
          env: << parameters.env >>
          pr: << parameters.pr >>
  integration-tests:
    parameters:
      local:
        type: boolean
        default: false
      env:
        type: string
        default: local
      log_dir:
        type: string
        default: "/tmp"
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
      - run:
          working_directory: integration-tests
          command: yarn install --immutable-cache
      - when:
          condition: << parameters.local >>
          steps:
            - run: cp config/dev.json build/config.json
            - run:
                command: npx serve build -l 3000
                background: true
            - run: timeout 120 bash -c "until nc -z localhost 3000; do sleep 3; done"
      - run:
          working_directory: integration-tests
          environment:
            LOG_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results"
            JEST_JUNIT_OUTPUT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/junit"
            SCREENSHOT_DIR: "<< parameters.log_dir >>/<< parameters.env >>/test-results/failure-screenshots"
            ENVIRONMENT: << parameters.env >>
          no_output_timeout: 16m
          command: |
            mkdir -p ${SCREENSHOT_DIR}
            TESTS_TO_RUN=$(yarn run jest --listTests | sed "s|$(pwd)/||" | circleci tests split --split-by=timings)
            yarn test $TESTS_TO_RUN --maxWorkers=2
      - store_test_results:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results/junit
      - store_artifacts:
          path: << parameters.log_dir >>/<< parameters.env >>/test-results
          destination: results
  notify_slack_error:
    parameters:
      channel:
        type: string
        default: ""
    steps:
      - run:
          command: echo << parameters.channel >>
      - slack/notify:
          branch_pattern: dev
          channel: << parameters.channel >>
          event: always # TODO change to fail
          template: basic_fail_1

jobs:
  build:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
            - deps-{{ .Branch }}-
      - run: yarn install --immutable-cache
      - run: yarn eslint --max-warnings=0 .
      - run: yarn test --maxWorkers=2
      - run: DISABLE_ESLINT_PLUGIN=true yarn build # already linted above
      - save_cache:
          key: deps-{{ .Branch }}-{{ checksum ".pnp.cjs" }}
          paths:
            - .yarn/unplugged
            - node_modules/.cache
      - run: tar -czf build.tgz .gcloudignore app.yaml build config
      - store_artifacts:
          path: build.tgz
      - persist_to_workspace:
          root: .
          paths:
            - .gcloudignore
            - app.yaml
            - build
            - config
  deploy-pr:
    executor: gcloud
    steps:
      - deploy-env:
          pr: true
  deploy-dev:
    executor: gcloud
    steps:
      - deploy-env
  deploy-alpha:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "ALPHA_SA_KEY_JSON"
          env: "alpha"
      - notify_slack_error:
          channel: "C7H40L71D" # dsde-qa-notify
  deploy-perf:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "PERF_SA_KEY_JSON"
          env: "perf"
  deploy-staging:
    executor: gcloud
    steps:
      - deploy-env:
          sa_key_var: "STAGING_SA_KEY_JSON"
          env: "staging"
      - notify_slack_error:
          channel: "C7H40L71D" # dsde-qa-notify
  integration-tests-branch-against-staging-experiment: # TODO remove string -experiment
    executor: puppeteer
    parallelism: 4
    steps:
      - integration-tests:
          local: true
          env: staging
      - notify_slack_error
  integration-tests-alpha-experiment: # TODO remove string -experiment
    executor: puppeteer
    parallelism: 4
    steps:
      - integration-tests:
          env: alpha
      - notify_slack_error
  integration-tests-staging-experiment: # TODO remove string -experiment
    executor: puppeteer
    parallelism: 4
    steps:
      - integration-tests:
          env: staging
      - notify_slack_error

workflows:
  version: 2
  build-deploy-experiment:  # TODO change back to build-deploy
    jobs:
      - build
      - integration-tests-branch-against-staging-experiment: # TODO remove string -experiment
          <<: *filter-pr-branch
          requires:
            - build
      - deploy-pr:
          <<: *filter-pr-branch
          requires:
            - build
      - deploy-dev:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-alpha:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-perf:
          <<: *filter-dev-branch
          requires:
            - build
      - deploy-staging:
          <<: *filter-dev-branch
          requires:
            - build
      - integration-tests-staging-experiment: # TODO remove string -experiment
          <<: *filter-dev-branch
          requires:
            - deploy-staging

  nightly-integration-tests:
    triggers:
      - schedule: # workflows use UTC as the timezone. EST is 5 hours behind UTC. Day-light saving is 4 hours behind.
          cron: "0 13 * * *"
          filters:
            branches:
              only: dev
    jobs:
      - integration-tests-alpha-experiment
